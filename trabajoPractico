import random
import tkinter as tk
from tkinter import messagebox, simpledialog

class Personaje:
    def _init_(self, nombre):
        self._nombre = nombre
        self._es_impostor = False
        self._comportamientos_dia = []

    def get_nombre(self):
        return self._nombre

    def es_impostor(self):
        return self._es_impostor

    def set_impostor(self, valor):
        self._es_impostor = valor

    def agregar_comportamiento(self, comportamiento):
        self._comportamientos_dia.append(comportamiento)

    def get_ultimo_comportamiento(self):
        return self._comportamientos_dia[-1] if self._comportamientos_dia else "No hay registro"

    def declarar_dia(self, pistas_encontradas, ubicacion_investigada):
        if self._es_impostor:
            return self._declarar_impostor(pistas_encontradas, ubicacion_investigada)
        else:
            return self._declarar_paciente_normal(pistas_encontradas, ubicacion_investigada)
 def _declarar_impostor(self, pistas, ubicacion):
        declaraciones = [
            f"Estuve en la {ubicacion} haciendo mis ejercicios de relajación",
            f"Pasé el día en la {ubicacion} meditando sobre mi recuperación",
            f"En la {ubicacion} practiqué mis técnicas de control mental",
            f"Dediqué el día en la {ubicacion} a organizar mis pensamientos"
        ]
        if any("labial" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} noté que alguien había estado maquillándose",
                f"Vi algo rojo en la {ubicacion} pero no le presté atención"
            ])
        if any("reloj" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} me fijé en la hora frecuentemente",
                f"El tiempo pasa lento aquí, lo noté en la {ubicacion}"
            ])
        if any("llave" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} pensé en lo importante que son las cerraduras",
                f"La {ubicacion} me recordó que debemos mantener todo seguro"
            ])
        return random.choice(declaraciones)

def _declarar_paciente_normal(self, pistas, ubicacion):
        declaraciones = [
            f"Estuve en la {ubicacion} viendo la televisión",
            f"En la {ubicacion} conversé con otros pacientes",
            f"Pasé el día en la {ubicacion} leyendo revistas",
            f"En la {ubicacion} ayudé a ordenar algunas cosas",
            f"Dediqué la tarde en la {ubicacion} a escribir en mi diario",
            f"En la {ubicacion} participé en actividades grupales"
        ]
        if any("labial" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} noté que había cosas de maquillaje",
                f"Vi colores llamativos en la {ubicacion} durante el día"
            ])
        return random.choice(declaraciones)

def interrogar(self, pistas_encontradas):
        if self._es_impostor:
            respuestas = [
                "No recuerdo nada fuera de lo normal hoy",
                "Estuve concentrado en mi terapia todo el día",
                "Solo hice lo que normalmente hacemos aquí",
                "Me sentí un poco ansioso pero es normal en mi condición"
            ]
            if any("labial" in pista.lower() for pista in pistas_encontradas):
                respuestas.extend([
                    "¿Maquillaje? No, yo no uso esas cosas",
                    "No sé nada sobre productos de belleza"
                ])
            if any("reloj" in pista.lower() for pista in pistas_encontradas):
                respuestas.extend([
                    "Siempre pierdo la noción del tiempo aquí",
                    "Los relojes me ponen nervioso, evito mirarlos"
                ])
        else:
            respuestas = [
                "Hoy fue un día como cualquier otro",
                "Me sentí bastante bien durante el día",
                "Participé en todas las actividades programadas",
                "Conversé con varios compañeros hoy",
                "Estuve un poco distraído pero nada grave"
            ]
            if any("labial" in pista.lower() for pista in pistas_encontradas):
                respuestas.extend([
                    "Vi a alguien con las manos manchadas hoy",
                    "Noté un olor peculiar en el aire"
                ])
        return random.choice(respuestas)

class Ubicacion:
    def _init_(self, nombre, pistas):
        self.nombre = nombre
        self.pistas = pistas
        self.pistas_restantes = pistas.copy()

    def obtener_pista(self):
        if self.pistas_restantes:
            return self.pistas_restantes.pop(0)
        return None

    def tiene_pistas(self):
        return len(self.pistas_restantes) > 0

    def _str_(self):
        pistas_restantes = len(self.pistas_restantes)
        return f"{self.nombre} ({pistas_restantes} pista{'s' if pistas_restantes != 1 else ''})"

class JuegoDetective:
    def _init_(self):
        self.personajes = []
        self.ubicaciones = []
        self.dia_actual = 1
        self.total_dias = 5
        self.pistas_encontradas = []
        self.impostor_real = None

    def inicializar_juego(self):
        nombres = ["Carlos", "Ana", "Miguel", "Laura", "David"]
        random.shuffle(nombres)
        self.personajes = [Personaje(nombre) for nombre in nombres[:3]]
        self.impostor_real = random.choice(self.personajes)
        self.impostor_real.set_impostor(True)
        self.ubicaciones = [
            Ubicacion("Dormitorio", [
                "Encontraste un labial rojo escondido entre las sábanas",
                "Hay un reloj con la hora detenida en las 3:15",
                "Ves unas llaves que no deberían estar aquí"
            ]),
            Ubicacion("Baño", [
                "Hay manchas rojas en el espejo del baño",
                "Encuentras un reloj de pulsera olvidado",
                "Ves marcas recientes en la cerradura"
            ]),
            Ubicacion("Cocina", [
                "Encuentras comida teñida de color rojo",
                "El reloj de la cocina ha sido manipulado",
                "Hay un juego de llaves extra en un cajón"
            ]),
            Ubicacion("Sótano", [
                "Encuentras restos de maquillaje en una mesa",
                "Hay un reloj antiguo que todavía funciona",
                "Ves llaves oxidadas de lugares desconocidos"
            ])
        ]
# ======================= EJECUCIÓN =======================
if _name_ == "_main_":
    root = tk.Tk()
    gui = JuegoGUI(root)
    root.mainloop()

