import random
import tkinter as tk
from tkinter import messagebox, simpledialog

class Personaje:
    def _init_(self, nombre):
        self._nombre = nombre
        self._es_impostor = False
        self._comportamientos_dia = []

    def get_nombre(self):
        return self._nombre

    def es_impostor(self):
        return self._es_impostor

    def set_impostor(self, valor):
        self._es_impostor = valor

    def agregar_comportamiento(self, comportamiento):
        self._comportamientos_dia.append(comportamiento)

    def get_ultimo_comportamiento(self):
        return self._comportamientos_dia[-1] if self._comportamientos_dia else "No hay registro"

    def declarar_dia(self, pistas_encontradas, ubicacion_investigada):
        if self._es_impostor:
            return self._declarar_impostor(pistas_encontradas, ubicacion_investigada)
        else:
            return self._declarar_paciente_normal(pistas_encontradas, ubicacion_investigada)
 def _declarar_impostor(self, pistas, ubicacion):
        declaraciones = [
            f"Estuve en la {ubicacion} haciendo mis ejercicios de relajación",
            f"Pasé el día en la {ubicacion} meditando sobre mi recuperación",
            f"En la {ubicacion} practiqué mis técnicas de control mental",
            f"Dediqué el día en la {ubicacion} a organizar mis pensamientos"
        ]
        if any("labial" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} noté que alguien había estado maquillándose",
                f"Vi algo rojo en la {ubicacion} pero no le presté atención"
            ])
        if any("reloj" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} me fijé en la hora frecuentemente",
                f"El tiempo pasa lento aquí, lo noté en la {ubicacion}"
            ])
        if any("llave" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} pensé en lo importante que son las cerraduras",
                f"La {ubicacion} me recordó que debemos mantener todo seguro"
            ])
        return random.choice(declaraciones)

def _declarar_paciente_normal(self, pistas, ubicacion):
        declaraciones = [
            f"Estuve en la {ubicacion} viendo la televisión",
            f"En la {ubicacion} conversé con otros pacientes",
            f"Pasé el día en la {ubicacion} leyendo revistas",
            f"En la {ubicacion} ayudé a ordenar algunas cosas",
            f"Dediqué la tarde en la {ubicacion} a escribir en mi diario",
            f"En la {ubicacion} participé en actividades grupales"
        ]
        if any("labial" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} noté que había cosas de maquillaje",
                f"Vi colores llamativos en la {ubicacion} durante el día"
            ])
        return random.choice(declaraciones)
