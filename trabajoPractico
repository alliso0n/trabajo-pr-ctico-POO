import random
import tkinter as tk
from tkinter import messagebox, simpledialog

class Personaje:
    def _init_(self, nombre):
        self._nombre = nombre
        self._es_impostor = False
        self._comportamientos_dia = []

    def get_nombre(self):
        return self._nombre

    def es_impostor(self):
        return self._es_impostor

    def set_impostor(self, valor):
        self._es_impostor = valor

    def agregar_comportamiento(self, comportamiento):
        self._comportamientos_dia.append(comportamiento)

    def get_ultimo_comportamiento(self):
        return self._comportamientos_dia[-1] if self._comportamientos_dia else "No hay registro"

    def declarar_dia(self, pistas_encontradas, ubicacion_investigada):
        if self._es_impostor:
            return self._declarar_impostor(pistas_encontradas, ubicacion_investigada)
        else:
            return self._declarar_paciente_normal(pistas_encontradas, ubicacion_investigada)
 def _declarar_impostor(self, pistas, ubicacion):
        declaraciones = [
            f"Estuve en la {ubicacion} haciendo mis ejercicios de relajaci√≥n",
            f"Pas√© el d√≠a en la {ubicacion} meditando sobre mi recuperaci√≥n",
            f"En la {ubicacion} practiqu√© mis t√©cnicas de control mental",
            f"Dediqu√© el d√≠a en la {ubicacion} a organizar mis pensamientos"
        ]
        if any("labial" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} not√© que alguien hab√≠a estado maquill√°ndose",
                f"Vi algo rojo en la {ubicacion} pero no le prest√© atenci√≥n"
            ])
        if any("reloj" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} me fij√© en la hora frecuentemente",
                f"El tiempo pasa lento aqu√≠, lo not√© en la {ubicacion}"
            ])
        if any("llave" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} pens√© en lo importante que son las cerraduras",
                f"La {ubicacion} me record√≥ que debemos mantener todo seguro"
            ])
        return random.choice(declaraciones)

def _declarar_paciente_normal(self, pistas, ubicacion):
        declaraciones = [
            f"Estuve en la {ubicacion} viendo la televisi√≥n",
            f"En la {ubicacion} convers√© con otros pacientes",
            f"Pas√© el d√≠a en la {ubicacion} leyendo revistas",
            f"En la {ubicacion} ayud√© a ordenar algunas cosas",
            f"Dediqu√© la tarde en la {ubicacion} a escribir en mi diario",
            f"En la {ubicacion} particip√© en actividades grupales"
        ]
        if any("labial" in pista.lower() for pista in pistas):
            declaraciones.extend([
                f"En la {ubicacion} not√© que hab√≠a cosas de maquillaje",
                f"Vi colores llamativos en la {ubicacion} durante el d√≠a"
            ])
        return random.choice(declaraciones)

def interrogar(self, pistas_encontradas):
        if self._es_impostor:
            respuestas = [
                "No recuerdo nada fuera de lo normal hoy",
                "Estuve concentrado en mi terapia todo el d√≠a",
                "Solo hice lo que normalmente hacemos aqu√≠",
                "Me sent√≠ un poco ansioso pero es normal en mi condici√≥n"
            ]
            if any("labial" in pista.lower() for pista in pistas_encontradas):
                respuestas.extend([
                    "¬øMaquillaje? No, yo no uso esas cosas",
                    "No s√© nada sobre productos de belleza"
                ])
            if any("reloj" in pista.lower() for pista in pistas_encontradas):
                respuestas.extend([
                    "Siempre pierdo la noci√≥n del tiempo aqu√≠",
                    "Los relojes me ponen nervioso, evito mirarlos"
                ])
        else:
            respuestas = [
                "Hoy fue un d√≠a como cualquier otro",
                "Me sent√≠ bastante bien durante el d√≠a",
                "Particip√© en todas las actividades programadas",
                "Convers√© con varios compa√±eros hoy",
                "Estuve un poco distra√≠do pero nada grave"
            ]
            if any("labial" in pista.lower() for pista in pistas_encontradas):
                respuestas.extend([
                    "Vi a alguien con las manos manchadas hoy",
                    "Not√© un olor peculiar en el aire"
                ])
        return random.choice(respuestas)

class Ubicacion:
    def _init_(self, nombre, pistas):
        self.nombre = nombre
        self.pistas = pistas
        self.pistas_restantes = pistas.copy()

    def obtener_pista(self):
        if self.pistas_restantes:
            return self.pistas_restantes.pop(0)
        return None

    def tiene_pistas(self):
        return len(self.pistas_restantes) > 0

    def _str_(self):
        pistas_restantes = len(self.pistas_restantes)
        return f"{self.nombre} ({pistas_restantes} pista{'s' if pistas_restantes != 1 else ''})"

class JuegoDetective:
    def _init_(self):
        self.personajes = []
        self.ubicaciones = []
        self.dia_actual = 1
        self.total_dias = 5
        self.pistas_encontradas = []
        self.impostor_real = None

    def inicializar_juego(self):
        nombres = ["Carlos", "Ana", "Miguel", "Laura", "David"]
        random.shuffle(nombres)
        self.personajes = [Personaje(nombre) for nombre in nombres[:3]]
        self.impostor_real = random.choice(self.personajes)
        self.impostor_real.set_impostor(True)
        self.ubicaciones = [
            Ubicacion("Dormitorio", [
                "Encontraste un labial rojo escondido entre las s√°banas",
                "Hay un reloj con la hora detenida en las 3:15",
                "Ves unas llaves que no deber√≠an estar aqu√≠"
            ]),
            Ubicacion("Ba√±o", [
                "Hay manchas rojas en el espejo del ba√±o",
                "Encuentras un reloj de pulsera olvidado",
                "Ves marcas recientes en la cerradura"
            ]),
            Ubicacion("Cocina", [
                "Encuentras comida te√±ida de color rojo",
                "El reloj de la cocina ha sido manipulado",
                "Hay un juego de llaves extra en un caj√≥n"
            ]),
            Ubicacion("S√≥tano", [
                "Encuentras restos de maquillaje en una mesa",
                "Hay un reloj antiguo que todav√≠a funciona",
                "Ves llaves oxidadas de lugares desconocidos"
            ])
        ]
# ======================= INTERFAZ GR√ÅFICA =======================

class JuegoGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üß† Juego del Impostor - Psiqui√°trico üïµÔ∏è‚Äç‚ôÇÔ∏è")
        self.juego = JuegoDetective()
        self.juego.inicializar_juego()
        self.crear_interfaz()
        self.investigado_hoy = False
        self.interrogado_hoy = False

    def crear_interfaz(self):
        self.texto = tk.Text(self.root, width=80, height=25, wrap="word", bg="#f9f9f9")
        self.texto.pack(pady=10)

        self.boton_investigar = tk.Button(self.root, text="üîç Investigar", command=self.investigar)
        self.boton_investigar.pack(side="left", padx=10)

        self.boton_interrogar = tk.Button(self.root, text="‚ùì Interrogar", command=self.interrogar, state="disabled")
        self.boton_interrogar.pack(side="left", padx=10)

        self.boton_siguiente = tk.Button(self.root, text="‚è≠Ô∏è Siguiente D√≠a", command=self.siguiente_dia,
                                         state="disabled")
        self.boton_siguiente.pack(side="left", padx=10)

        self.mostrar_intro()

    def mostrar_intro(self):
        self.texto.insert(tk.END, "=== INVESTIGACI√ìN PSIQUI√ÅTRICA ===\n")
        self.texto.insert(tk.END, "Hay 3 pacientes, pero uno es un impostor con graves problemas psicol√≥gicos.\n")
        self.texto.insert(tk.END, f"Tienes {self.juego.total_dias} d√≠as para descubrirlo.\n\n")
        self.mostrar_estado_dia()

    def mostrar_estado_dia(self):
        self.texto.insert(tk.END, f"\nüóìÔ∏è D√çA {self.juego.dia_actual}\n{'=' * 40}\n")
        self.boton_investigar.config(state="normal")
        self.boton_interrogar.config(state="disabled")
        self.boton_siguiente.config(state="disabled")
        self.investigado_hoy = False
        self.interrogado_hoy = False

    def investigar(self):
        ubicaciones = [u for u in self.juego.ubicaciones if u.tiene_pistas()]
        if not ubicaciones:
            messagebox.showinfo("Sin pistas", "No hay m√°s ubicaciones para investigar.")
            return
        nombres = [str(u) for u in ubicaciones]
        eleccion = simpledialog.askinteger("Investigar", f"Elige una ubicaci√≥n:\n" + "\n".join(
            [f"{i + 1}. {n}" for i, n in enumerate(nombres)]))
        if eleccion is None or eleccion < 1 or eleccion > len(ubicaciones):
            return
        ubicacion = ubicaciones[eleccion - 1]
        pista = ubicacion.obtener_pista()
        if pista:
            self.texto.insert(tk.END, f"\nüéØ {pista}\n")
            self.juego.pistas_encontradas.append(pista)
        else:
            self.texto.insert(tk.END, "\nNo encontraste nada nuevo aqu√≠.\n")
        self.declaraciones(ubicacion.nombre)
        self.investigado_hoy = True
        self.boton_investigar.config(state="disabled")
        self.boton_interrogar.config(state="normal")

    def declaraciones(self, ubicacion_nombre):
        self.texto.insert(tk.END, "\nüìù DECLARACIONES DEL D√çA:\n")
        for p in self.juego.personajes:
            declaracion = p.declarar_dia(self.juego.pistas_encontradas, ubicacion_nombre)
            p.agregar_comportamiento(declaracion)
            self.texto.insert(tk.END, f"- {p.get_nombre()}: {declaracion}\n")

    def interrogar(self):
        if not self.investigado_hoy:
            messagebox.showwarning("Acci√≥n no permitida", "Primero debes investigar una ubicaci√≥n.")
            return

        nombres = [p.get_nombre() for p in self.juego.personajes]
        eleccion = simpledialog.askinteger("Interrogatorio", f"¬øA qui√©n deseas interrogar?\n" + "\n".join(
            [f"{i + 1}. {n}" for i, n in enumerate(nombres)]) + "\n4. No interrogar a nadie")
        if eleccion in [1, 2, 3]:
            personaje = self.juego.personajes[eleccion - 1]
            respuesta = personaje.interrogar(self.juego.pistas_encontradas)
            self.texto.insert(tk.END, f"\n‚ùì {personaje.get_nombre()}: \"{respuesta}\"\n")
        else:
            self.texto.insert(tk.END, "\nNo interrogar√°s a nadie hoy.\n")

        self.interrogado_hoy = True
        self.boton_interrogar.config(state="disabled")
        self.boton_siguiente.config(state="normal")

    def siguiente_dia(self):
        if not self.interrogado_hoy:
            messagebox.showwarning("Acci√≥n no permitida",
                                   "Debes interrogar a alguien (o decidir no hacerlo) antes de pasar al siguiente d√≠a.")
            return

        self.juego.dia_actual += 1
        if self.juego.dia_actual > self.juego.total_dias:
            self.fase_acusacion()
        else:
            self.mostrar_estado_dia()

    def fase_acusacion(self):
        self.texto.insert(tk.END, "\n‚è∞ FASE FINAL - ACUSACI√ìN\n")
        self.texto.insert(tk.END, "\nüìä Pistas encontradas:\n")
        for i, pista in enumerate(self.juego.pistas_encontradas, 1):
            self.texto.insert(tk.END, f"{i}. {pista}\n")
        nombres = [p.get_nombre() for p in self.juego.personajes]
        eleccion = simpledialog.askinteger("Acusaci√≥n", "¬øQui√©n es el impostor?\n" + "\n".join(
            [f"{i + 1}. {n}" for i, n in enumerate(nombres)]))
        if eleccion and 1 <= eleccion <= len(self.juego.personajes):
            elegido = self.juego.personajes[eleccion - 1]
            if elegido.es_impostor():
                messagebox.showinfo("üéâ ¬°Correcto!", f"{elegido.get_nombre()} era el impostor.")
            else:
                messagebox.showerror("üíÄ Incorrecto",
                                     f"{elegido.get_nombre()} era inocente.\nEl impostor era {self.juego.impostor_real.get_nombre()}.")
        else:
            messagebox.showwarning("Acusaci√≥n inv√°lida", "No elegiste correctamente.")
        self.root.destroy()

# ======================= EJECUCI√ìN =======================
if _name_ == "_main_":
    root = tk.Tk()
    gui = JuegoGUI(root)
    root.mainloop()

